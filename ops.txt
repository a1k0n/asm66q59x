# nX-8/500S instruction list
# * means byte prefix (defined separately)
# ** means word prefix
# format: <bytes> = <instruction>

# instruction variables:
#  Rn -> matches <hex>+n byte
#  fix8 -> %02x % fix8
#  off8 -> %02x % off8
#  sfr8 -> sfr8_name[sfr8]
#  sfr16 -> sfr16_name[sfr8]
#  n16 -> %04x % l16 + (h16 << 8)
#  n7p -> %02x[DP] % (signextend(n7))
#      or %02x[USP] % (signextend(n7 - 0x80)) if n7 >= 0x80
#  radr -> %04x % addr + len(opcodes) + ((int8_t) rdiff8)

# ACAL
44+Cadr11H Cadr11L = ACAL Cadr11

# ADC / ADCB
DD1 BC F3 l16 h16 = ADC A, #n16
** F5 = ADC A, **
** F0 fix8 = ADC **, fix8
** F1 off8 = ADC **, off8
** F2 sfr8 = ADC **, sfr16
** F3 l16 h16 = ADC **, #n16
** F4 = ADC **, A

DD0 BC F3 n8 = ADCB A, #n8
* F5 = ADCB A, *
* F0 fix8 = ADCB *, fix8
* F1 off8 = ADCB *, off8
* F2 sfr8 = ADCB *, sfr8
* F3 n8 = ADCB *, #n8
* F4 = ADCB *, A

# ADD A, obj
DD1 28+n = ADD A, ERn
DD1 2C+n = ADD A, PRn
DD1 AE l16 h16 = ADD A, #n16
DD1 AC fix8 = ADD A, fix8
DD1 AD off8 = ADD A, off8
** A5 = ADD A, **

# ADD obj1, obj2
** A0 fix8 = ADD **, fix8
** A1 off8 = ADD **, off8
** A2 sfr8 = ADD **, sfr16
** A3 l16 h16 = ADD **, #n16
** A4 = ADD **, A

# ADDB A, obj
DD0 28+n = ADDB A, Rn
DD0 AE n8 = ADDB A, #n8
DD0 AC fix8 = ADDB A, fix8
DD0 AD off8 = ADDB A, off8
* A5 = ADDB A, *

# ADDB obj1, obj2
* A0 fix8 = ADDB *, fix8
* A1 off8 = ADDB *, off8
* A2 sfr8 = ADDB *, sfr16
* A3 n8 = ADDB *, #n8
* A4 = ADDB *, A

# AND A, obj
DD1 BD off8 = AND A, off8
DD1 BE l16 h16 = AND A, #n16
** B5 = AND A, **

# AND obj1, obj2
** B0 fix8 = AND **, fix8
** B1 off8 = AND **, off8
** B2 sfr8 = AND **, sfr16
** B3 l16 h16 = AND **, #n16
** B4 = AND **, A

# ANDB A, obj
DD0 BD off8 = ANDB A, off8
DD0 BE n8 = ANDB A, #n8
* B5 = ANDB A, *

# ANDB obj1, obj2
* B0 fix8 = ANDB *, fix8
* B1 off8 = ANDB *, off8
* B2 sfr8 = ANDB *, sfr8
* B3 n8 = ANDB *, #n8
* B4 = ANDB *, A

# BAND/BOR/BXOR
BC 40+bit = BAND C, A.bit
* 40+bit = BAND C, *.bit
BC 48+bit = BANDN C, A.bit
* 48+bit = BANDN C, *.bit
BC 50+bit = BOR C, A.bit
* 50+bit = BOR C, *.bit
BC 58+bit = BORN C, A.bit
* 58+bit = BORN C, *.bit
BC 60+bit = BXOR C, A.bit
* 60+bit = BXOR C, *.bit

# BRK
DD- FF = BRK

# CAL
FE CadrL CadrH = CAL Cadr
BC EB = CAL [A]
** EB = CAL [**]

# CLR/CLRB
DD+ FA = CLR A
** C7 = CLR **
DD- FB = CLRB A
* C7 = CLRB *

# CMP A, obj
DD1 18+n = CMP A, ERn
DD1 1C+n = CMP A, PRn
DD1 9E l16 h16 = CMP A, #n16
DD1 9C fix8 = CMP A, fix8
DD1 9D off8 = CMP A, off8
** 95 = CMP A, **

# CMP obj1, obj2
C4 fix8 l16 h16 = CMP fix8, #n16
C5 off8 l16 h16 = CMP off8, #n16
** 90 fix8 = CMP **, fix8
** 91 off8 = CMP **, off8
** 92 sfr8 = CMP **, sfr16
** 93 l16 h16 = CMP **, #n16
** 94 = CMP **, A

# CMPB A, obj
DD0 18+n = CMPB A, Rn
DD0 9E n8 = CMPB A, #n8
DD0 9C fix8 = CMPB A, fix8
DD0 9D off8 = CMPB A, off8
* 95 = CMPB A, *

# CMPB obj1, obj2
D4 fix8 n8 = CMPB fix8, #n8
D5 off8 n8 = CMPB off8, #n8
* 90 fix8 = CMPB *, fix8
* 91 off8 = CMPB *, off8
* 92 sfr8 = CMPB *, sfr8
* 93 n8 = CMPB *, #n8
* 94 = CMPB *, A

# CMPC / CMPCB
** D8 = CMPC A, [**]
** E6 T16L T16H = CMPC A, T16[**]
** B6 TadrL TadrH = CMPC A, Tadr
** D9 = CMPCB A, [**]
** F6 T16L T16H = CMPCB A, T16[**]
** B6 TadrL TadrH = CMPCB A, Tadr

# CPL (complement carry)
FD = CPL C

# DEC / DECB
DD1 DC = DEC A
50+n = DEC PRn
** D6 = DEC **
DD0 DC = DECB A
D0 = DEC R0
D1 = DEC R1
D2 = DEC R2
D3 = DEC R3
* D6 = DECB *

# DI (disable interrupts)
DA = DI

# DIV / DIVB / DIVQ
** A8 = DIV **
* A8 = DIVB *
** FB = DIVQ **

# DJNZ
05 rdiff7 = DJNZ R45, rdiff7
** EA rdiff8 = DJNZ **L, radr
BC EA rdiff8 = DJNZ A, radr
* EA rdiff8 = DJNZ *, radr

# EI (enable interrupts)
DB = EI

# EXTND (sign extend AL -> A)
DD+ FC = EXTND

# FCAL (far call)
# not used in this rom; not implementing now

# FILL (set to FFFF)
DD1 BC D7 = FILL A
** D7 = FILL **
DD0 BC D7 = FILLB A
* D7 = FILLB *

# FJ (far jump)
# not used in this rom; not implementing now

# FRT (far return)
# not used in this rom; not implementing now

# INC / INCB
DD1 CC = INC A
40+n = INC PRn
** C6 = INC **
DD0 CC = INCB A
C0 = INCB R0
C1 = INCB R1
C2 = INCB R2
C3 = INCB R3
* C6 = INCB *

# J
03 CadrL CadrH = J Cadr
BC C9 = J [A]
** C9 = J [**]

# JBR/JBRS/JBS/JBSR
58+bit sbafix6+C0 rdiff8 = JBR sbafix.bit, radr
48+bit sbaoff6+C0 rdiff8 = JBR sbaoff.bit, radr
BC 20+bit rdiff8 = JBR A.bit, radr
* 20+bit rdiff8 = JBR *.bit, radr
BC 30+bit rdiff8 = JBRS A.bit, radr
* 30+bit rdiff8 = JBRS *.bit, radr
58+bit sbafix6+80 rdiff8 = JBS sbafix.bit, radr
48+bit sbaoff6+80 rdiff8 = JBS sbaoff.bit, radr
BC 28+bit rdiff8 = JBS A.bit, radr
* 28+bit rdiff8 = JBS *.bit, radr
BC 38+bit rdiff8 = JBSR A.bit, radr
* 38+bit rdiff8 = JBSR *.bit, radr

# Jcc
F0 rdiff8 = JGT radr
F5 rdiff8 = JGE radr
F2 rdiff8 = JLT radr
F7 rdiff8 = JLE radr
F1 rdiff8 = JEQ radr
F6 rdiff8 = JNE radr
* FE rdiff8 = JGTS radr
* FF rdiff8 = JGES radr
* FC rdiff8 = JLTS radr
* FD rdiff8 = JLES radr
F4 rdiff8 = JPS radr
F3 rdiff8 = JNS radr

# these are just aliases for JBS (overflow bit)
# 9A 29 rdiff8 = JOV radr
# 9A 21 rdiff8 = JNV radr

# JRNZ (same as DJNZ DPL, radr)
#62 EA rdiff8 = JRNZ DP, radr

# L A, obj (sets DD to 1)
DD+ F8 l16 h16 = L A, #n16
DD+ 74+n = L A, ERn
DD+ 70+n = L A, PRn
DD+ 80 = L A, [X1]
DD+ 81 = L A, [DP-]
DD+ 82 = L A, [DP]
DD+ 83 = L A, [DP+]
DD+ 84 fix8 = L A, fix8
DD+ 85 off8 = L A, off8
DD+ 86 sfr8 = L A, sfr16
DD+ 87 l16 h16 = L A, n16
DD+ 88 l16 h16 = L A, n16[X1]
DD+ 89 n7 = L A, n7p

# LB A, obj (sets DD to 0)
DD- F9 n8 = LB A, #n8
DD- 78+n = LB A, Rn
DD- 90 = LB A, [X1]
DD- 91 = LB A, [DP-]
DD- 92 = LB A, [DP]
DD- 93 = LB A, [DP+]
DD- 94 fix8 = LB A, fix8
DD- 95 off8 = LB A, off8
DD- 96 sfr8 = LB A, sfr8
DD- 97 l16 h16 = LB A, n16
DD- 98 l16 h16 = LB A, n16[X1]
DD- 99 n7 = LB A, n7p

# LC A, [obj]
BC DA = LC A, [A]
** DA = LC A, [**]
BC E7 T16L T16H = LC A, T16[A]
** E7 T16L T16H = LC A, T16[**]
** B7 TadrL TadrH = LC A, Tadr
BC DB = LCB A, [A]
** DB = LCB A, [**]
BC F7 T16L T16H = LCB A, T16[A]
** F7 T16L T16H = LCB A, T16[**]
* B7 TadrL TadrH = LCB A, Tadr

# MB (move bbit)
BC 10+bit = MB C, A.bit
* 10+bit = MB C, *.bit
BC 18+bit = MB A.bit, C
* 18+bit = MB *.bit, C

# MBR (bit addressing via AL?)
* BA = MBR C, *.(AL)
* BB = MBR *.(AL), C

# MOV obj1, #n16
24+n l16 h16 = MOV ERn, #n16
20+n l16 h16 = MOV PRn, #n16
C7 off8 l16 h16 = MOV off8, #n16
C6 sfr8 l16 h16 = MOV sfr16, #n16

# MOV obj1, obj2
** 97 = MOV A, **
** 70+n = MOV ERn, **
** 74+n = MOV PRn, **
** 88 = MOV [X1], **
** 89 = MOV [DP-], **
** 8A = MOV [DP], **
** 8B = MOV [DP+], **
** 86 fix8 = MOV fix8, **
** 87 off8 = MOV off8, **
** 96 sfr8 = MOV sfr16, **
** 9B l16 h16 = MOV n16, **
** 98 l16 h16 = MOV n16[X1], **
** 99 l16 h16 = MOV n16[X2], **
** 9A n7 = MOV n7p, **
** F8 = MOV [X1+A], **
** F9 = MOV [X1+R0], **
** AA = MOV **, A
** AB l16 h16 = MOV **, #n16

# MOVB
10+n n8 = MOVB Rn, #n8
D7 off8 n8 = MOVB off8, #n8
D6 sfr8 n8 = MOVB sfr8, #n8
* 97 = MOVB A, *
* 70+n = MOVB Rn, *
* 88 = MOVB [X1], *
* 89 = MOVB [DP-], *
* 8A = MOVB [DP], *
* 8B = MOVB [DP+], *
* 86 fix8 = MOVB fix8, *
* 87 off8 = MOVB off8, *
* 96 sfr8 = MOVB sfr8, *
* 9B l16 h16 = MOVB n16, *
* 98 l16 h16 = MOVB n16[X1], *
* 99 l16 h16 = MOVB n16[X2], *
* 9A n7 = MOVB n7p, *
* F8 = MOVB [X1+A], *
* F9 = MOVB [X1+R0], *
* AA = MOVB *, A
* AB n8 = MOVB *, #n8

# MUL
** A9 = MUL **
* A9 = MULB *

DD1 CF = NEG A
# the docs claim this sets DD to 1 as well but that has to be wrong
DD0 CF = NEGB A

# NOP
00 = NOP

# OR / ORB
DD1 CD off8 = OR A, off8
DD1 CE l16 h16 = OR A, #n16
** C5 = OR A, **
** C0 fix8 = OR **, fix8
** C1 off8 = OR **, off8
** C2 sfr8 = OR **, sfr16
** C3 l16 h16 = OR **, #n16
** C4 = OR **, A
DD0 CD off8 = ORB A, off8
DD0 CE n8 = ORB A, #n8
* C5 = ORB A, *
* C0 fix8 = OR *, fix8
* C1 off8 = OR *, off8
* C2 sfr8 = OR *, sfr8
* C3 n8 = OR *, #n8
* C4 = OR *, A

# PUSHS / POPS (FIXME)
06 n8 = PUSH/POP S/U #n8
07 = PUSHS A

# RB
58+bit sbafix6+40 = RB sbafix.bit
48+bit sbaoff6+40 = RB sbaoff.bit
BC 00+bit = RB A.bit
* 00+bit = RB *.bit

# RBR (reset bit relative)
* B9 = RBR *.(AL)

# RC reset carry
CA = RC

# set/reset DD
DD- D8 = RDD

# ROL/ROR (rotate)
DD1 AF = ROL A
DD1 BC AC+width = ROL A, width
** AC+width = ROL **, width
DD0 AF = ROLB A
DD0 BC AC+width = ROLB A, width
* AC+width = ROLB *, width
DD1 BF = ROR A
DD1 BC BC+width = ROR A, width
** BC+width = ROR **, width
DD0 BF = RORB A
DD0 BC BC+width = RORB A, width
* BC+width = RORB *, width

# RT / RTI (return)
01 = RT
02 = RTI

58+bit sbafix6+00 = SB sbafix.bit
48+bit sbaoff6+00 = SB sbaoff.bit
BC 08+bit = SB A.bit
* 08+bit = SB *.bit

# SBC (subtract w/ borrow carry)
DD1 BC E3 l16 h16 = SBC A, #n16
** E5 = SBC A, **
** E0 fix8 = SBC **, fix8
** E1 off8 = SBC **, off8
** E2 sfr8 = SBC **, sfr16
** E3 l16 h16 = SBC **, #n16
** E4 = SBC **, A
DD0 BC E3 n8 = SBCB A, #n8
* E5 = SBCB A, *
* E0 fix8 = SBCB *, fix8
* E1 off8 = SBCB *, off8
* E2 sfr8 = SBCB *, sfr8
* E3 n8 = SBCB *, #n8
* E4 = SBCB *, A

# SBR (set bit relative)
* B8 = SBR *.(AL)

# set carry
CB = SC

# set DD
DD+ D9 = SDD

# SJ
04 rdiff8 = SJ radr

# SLL
DD1 8F = SLL A
DD1 BC 8C+width = SLL A, width
** 8C+width = SLL **, width
DD0 8F = SLLB A
DD0 BC 8C+width = SLLB A, width
* 8C+width = SLLB *, width

# SQR
DD1 BC A9 = SQR A
DD0 BC A9 = SQRB A

# SRA (arithmetic shift right w/ carry)
DD1 BC EC+width = SRA A, width
** EC+width = SRA **, width
DD0 BC EC+width = SRAB A, width
* EC+width = SRAB *, width

# SRL (shift right logical)
DD1 9F = SRL A
DD1 BC 9C+width = SRL A, width
** 9C+width = SRL **, width
DD0 9F = SRLB A
DD0 BC 9C+width = SRLB A, width
* 9C+width = SRLB *, width

# ST
DD1 38+n = ST A, ERn
DD1 3C+n = ST A, PRn
DD1 30 = ST A, [X1]
DD1 31 = ST A, [DP-]
DD1 32 = ST A, [DP]
DD1 33 = ST A, [DP+]
DD1 34 fix8 = ST A, fix8
DD1 35 off8 = ST A, off8
DD1 36 sfr8 = ST A, sfr16
DD1 37 l16 h16 = ST A, n16
DD1 C8 l16 h16 = ST A, n16[X1]
DD1 BC 99 l16 h16 = ST A, n16[X2]
DD1 C9 n7 = ST A, n7p

# STB
DD0 38+n = STB A, Rn
DD0 30 = STB A, [X1]
DD0 31 = STB A, [DP-]
DD0 32 = STB A, [DP]
DD0 33 = STB A, [DP+]
DD0 34 fix8 = STB A, fix8
DD0 35 off8 = STB A, off8
DD0 36 sfr8 = STB A, sfr8
DD0 37 l16 h16 = STB A, n16
DD0 C8 l16 h16 = STB A, n16[X1]
DD0 BC 99 l16 h16 = STB A, n16[X2]
DD0 C9 n7 = STB A, n7p

# SUB A, obj (requires DD=1)
DD1 08+n = SUB A, ERn
DD1 0C+n = SUB A, PRn
DD1 8E l16 h16 = SUB A, #n16
DD1 8C fix8 = SUB A, fix8
DD1 8D off8 = SUB A, off8
** 85 = SUB A, **

# SUB obj1, obj2 (word length), DD doesn't matter
** 80 fix8 = SUB **, fix8
** 81 off8 = SUB **, off8
** 82 sfr8 = SUB **, sfr16
** 83 l16 h16 = SUB **, #n16
** 84 = SUB **, A

# SUBB A, obj (requires DD=0)
DD0 08+n = SUBB A, Rn
DD0 8E n8 = SUBB A, #n8
DD0 8C fix8 = SUBB A, fix8
DD0 8D off8 = SUBB A, off8
* 85 = SUBB A, *

# SUBB obj1, obj2 (byte length)
* 80 fix8 = SUBB *, fix8
* 81 off8 = SUBB *, off8
* 82 sfr8 = SUBB *, sfr8
* 83 n8 = SUBB *, #n8
* 84 = SUBB *, A

# SWAP (AH<->AL)
DF = SWAP

# TBR (test bit relative)
* CA = TBR *.(AL)

# TJNZ / TJZ
DD1 BC A6 rdiff8 = TJNZ A, radr
** A6 rdiff8 = TJNZ **, radr
DD0 BC A6 rdiff8 = TJNZB A, radr
* A6 rdiff8 = TJNZB *, radr

DD1 BC A7 rdiff8 = TJZ A, radr
** A7 rdiff8 = TJZ **, radr
DD0 BC A7 rdiff8 = TJZB A, radr
* A7 rdiff8 = TJZB *, radr

# VCAL
E0+Vno = VCAL Vadr

# XCHG / XCHGB
** C8 = XCHG A, **
* C8 = XCHGB A, *

# XOR / XORB
DD1 DD off8 = XOR A, off8
DD1 DE l16 h16 = XOR A, #n16
** D5 = XOR A, **
** D0 fix8 = XOR **, fix8
** D1 off8 = XOR **, off8
** D2 sfr8 = XOR **, sfr16
** D3 l16 h16 = XOR **, #n16
** D4 = XOR **, A
DD0 DD off8 = XORB A, off8
DD0 DE n8 = XORB A, #n8
* D5 = XORB A, *
* D0 fix8 = XORB *, fix8
* D1 off8 = XORB *, off8
* D2 sfr8 = XORB *, sfr8
* D3 n8 = XORB *, #n8
* D4 = XORB *, A
